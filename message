alphabet = 'abcdefghijklmnopqrstuvwxyz'
### Decode message with known offset 
# def coded_message(message, offset):
#     decoded_message = []
#     for char in range(len(message)):
#         if message[char] in [" ", ",", ".", "?", "!"]:
#                 decoded_message.append(message[char])
#         else:
#             for letter in range(len(alphabet_fixed)):
#                 if message[char] == alphabet_fixed[letter]:
#                     decoded_message.append(alphabet_fixed[letter - offset])
#                     break
#     message_fixed = ''.join(decoded_message)
#     return message_fixed

### Decode message
# message = "bqdradyuzs ygxfubxq omqemd oubtqde fa oapq kagd yqeemsqe ue qhqz yadq eqogdq!"
# print(coded_message(message, 12))

### Encode message
# message2 = "hey there! this is an example of a caesar cipher. were you able to decode it? i hope so! send me a message back with the same offset!"
# print(coded_message(message2, 10))

### #Decode withtout offset
# def decode_message(message):
#     decoded_messages = []
#     for offset in range(26):
#         decoded_message = ''
#         for char in message:
#             if char in [" ", ",", ".", "?", "!"]:
#                 decoded_message += char
#             elif char in alphabet:
#                 decoded_char_index = (alphabet.index(char) - offset) % 26
#                 decoded_message += alphabet[decoded_char_index]
#         decoded_messages.append(decoded_message)
#     return decoded_messages
          
# message = "vhfinmxkl atox kxgwxkxw tee hy maxlx hew vbiaxkl hulhexmx. px'ee atox mh kxteer lmxi ni hnk ztfx by px ptgm mh dxxi hnk fxlltzxl ltyx."
# decoded_messages = decode_message(message)

# for index, decoded_message in enumerate(decoded_messages):
#     print(f"Offset {index}: {decoded_message}")

### Vigenere DeCipher
# keyword = 'friends'
# vigenere_message = 'txm srom vkda gl lzlgzr qpdb? fepb ejac! ubr imn tapludwy mhfbz cza ruxzal wg zztcgcexxch!'
# def vigenere_decoder(message, keyword):
#     decoded_vigenere = ''
#     keyword_index = 0
#     for char in message:
#         if char in alphabet:
#             position = (alphabet.index(char) + alphabet.index(keyword[keyword_index])) % 26
#             decoded_vigenere += alphabet[position]
#             keyword_index = (keyword_index + 1) % len(keyword)
#         else:
#             decoded_vigenere += char
#     return decoded_vigenere

# decoded_message_vigenere = vigenere_decoder(vigenere_message, keyword)
# print(decoded_message_vigenere)

### Vigenere Cipher
keyword = 'besties'
vigenere_message = "whyle i have friends with me, i fear no harm"
def vigenere_coder(message, keyword):
    coded_vigenere = ''
    keyword_index = 0
    for char in message:
        if char in alphabet:
            position = (alphabet.index(char) - alphabet.index(keyword[keyword_index])) % 26
            coded_vigenere += alphabet[position]
            keyword_index = (keyword_index + 1) % len(keyword)
        else:
            coded_vigenere += char
    return coded_vigenere

message_coded_vigenere = vigenere_coder(vigenere_message, keyword)
print(message_coded_vigenere)
